------------------------------------------------------------------------------------------------------

ASSIGNMENT 1

------------------------------------------------------------------------------------------------------
-- Instructor table
CREATE TABLE Instructor (
    ID NUMBER(5),
    Name VARCHAR2(30),
    Dept_name VARCHAR2(20),
    Salary NUMBER(6)
);

-- Course table
CREATE TABLE Course (
    Course_id VARCHAR2(10),
    Title VARCHAR2(30),
    Dept_name VARCHAR2(20),
    Credits NUMBER(2)
);

-- Prereq table
CREATE TABLE Prereq (
    Course_id VARCHAR2(10),
    Prereq_id VARCHAR2(10)
);

-- Department table
CREATE TABLE Department (
    Dept_name VARCHAR2(20),
    Building VARCHAR2(20),
    Budget NUMBER(10)
);

-- Teaches table
CREATE TABLE Teaches (
    ID NUMBER(5),
    Course_id VARCHAR2(10),
    Sec_id NUMBER(2),
    Semester VARCHAR2(10),
    Year NUMBER(4)
);


INSERT INTO Instructor VALUES (101, 'Samiya', 'CSE', 50000);
INSERT INTO Instructor VALUES (102, 'Ayesha', 'ECE', 52000);
INSERT INTO Instructor VALUES (103, 'Barkha', 'EEE', 48000);
INSERT INTO Instructor VALUES (104, 'Karan', 'Civil', 55000);
INSERT INTO Instructor VALUES (105, 'Rahul', 'Mechanical', 53000);


INSERT INTO Course VALUES ('C101', 'DBMS', 'CSE', 4);
INSERT INTO Course VALUES ('C102', 'Networks', 'ECE', 3);
INSERT INTO Course VALUES ('C103', 'Machines', 'EEE', 3);
INSERT INTO Course VALUES ('C104', 'Mechanics', 'Civil', 4);
INSERT INTO Course VALUES ('C105', 'Thermodynamics', 'Mechanical', 4);


INSERT INTO Prereq VALUES ('C101', 'C100');
INSERT INTO Prereq VALUES ('C102', 'C101');
INSERT INTO Prereq VALUES ('C103', 'C101');
INSERT INTO Prereq VALUES ('C104', 'C102');
INSERT INTO Prereq VALUES ('C105', 'C103');


INSERT INTO Department VALUES ('CSE', 'Block A', 1000000);
INSERT INTO Department VALUES ('ECE', 'Block B', 950000);
INSERT INTO Department VALUES ('EEE', 'Block C', 900000);
INSERT INTO Department VALUES ('Civil', 'Block D', 850000);
INSERT INTO Department VALUES ('Mechanical', 'Block E', 800000);


INSERT INTO Teaches VALUES (101, 'C101', 1, 'Spring', 2023);
INSERT INTO Teaches VALUES (102, 'C102', 2, 'Fall', 2023);
INSERT INTO Teaches VALUES (103, 'C103', 1, 'Spring', 2023);
INSERT INTO Teaches VALUES (104, 'C104', 1, 'Fall', 2023);
INSERT INTO Teaches VALUES (105, 'C105', 2, 'Spring', 2023);

----------------------------------------------------------------------------------------------------------------

Assignment 2

----------------------------------------------------------------------------------------------------------------
1. Display the details of the instructors whose salary is more than 50,000.
SELECT * 
FROM Instructor 
WHERE Salary > 50000;

2. Display the name of instructors whose department name is “CSE”.
SELECT Name 
FROM Instructor 
WHERE Dept_name = 'CSE';

3. Display the instructor name and salary in descending order of salary.
SELECT Name, Salary 
FROM Instructor 
ORDER BY Salary DESC;

4. Display the details of the courses which has more than 3 credits.
SELECT * 
FROM Course 
WHERE Credits > 3;

5. Display the details of instructor who teaches the course_id “C101”.
SELECT I.* 
FROM Instructor I 
JOIN Teaches T ON I.ID = T.ID 
WHERE T.Course_id = 'C101';

6. Display the instructor name and the course title they are teaching.
SELECT I.Name, C.Title 
FROM Instructor I 
JOIN Teaches T ON I.ID = T.ID 
JOIN Course C ON T.Course_id = C.Course_id;

7. Display the department name and budget which has budget more than 900000.
SELECT Dept_name, Budget 
FROM Department 
WHERE Budget > 900000;

8. Display the instructor names who are teaching in year 2023.
SELECT DISTINCT I.Name 
FROM Instructor I 
JOIN Teaches T ON I.ID = T.ID 
WHERE T.Year = 2023;

-------------------------------------------------------------------------------------------------------------

Assignment 3

--------------------------------------------------------------------------------------------------------------
1. SQL Queries using SQL Operators

a) Display the Course_ids, Titles and Credits of course that are offered in any of the departments namely: Physics, Music, Finance and Biology.
SELECT Course_id, Title, Credits 
FROM Course 
WHERE Dept_name IN ('Physics', 'Music', 'Finance', 'Biology');

b) Display records of the instructors whose name starts with “K” and who get salary more than 65000.
SELECT * 
FROM Instructor 
WHERE Name LIKE 'K%' AND Salary > 65000;

c) Display name, department, gross salary and net salary of instructors with 105% DA, 20% HRA, 30% IT.
SELECT Name, Dept_name, 
       Salary + Salary*1.05 + Salary*0.2 AS Gross_Salary, 
       (Salary + Salary*1.05 + Salary*0.2) - (Salary*0.3) AS Net_Salary 
FROM Instructor;

d) Display records of the Instructors with salary range 60000 to 80000.
SELECT * 
FROM Instructor 
WHERE Salary BETWEEN 60000 AND 80000;

e) Display the records of the instructors having the second letter in their name as ‘r’.
SELECT * 
FROM Instructor 
WHERE Name LIKE '_r%';

f) Display the names of the instructors of Comp.Sci. Department in the descending order of their salary.
SELECT Name 
FROM Instructor 
WHERE Dept_name = 'Comp.Sci.' 
ORDER BY Salary DESC;

g) Update all records of Instructor table with a salary hike of 15%.
UPDATE Instructor 
SET Salary = Salary * 1.15;

h) Update the records with a salary hike of 3% for Comp.Sci. Dept instructors having salary less than 70000.
UPDATE Instructor 
SET Salary = Salary * 1.03 
WHERE Dept_name = 'Comp.Sci.' AND Salary < 70000;

i) Display the annual salary of each instructor.
SELECT Name, Salary * 12 AS Annual_Salary 
FROM Instructor;

j) Update the title of the course having title 'Game Design' to 'Game Theory'.
UPDATE Course 
SET Title = 'Game Theory' 
WHERE Title = 'Game Design';

k) Delete the instructor records of History department.
DELETE FROM Instructor 
WHERE Dept_name = 'History';

l) Delete the course records of the courses having course_id starting with 'BIO'
DELETE FROM Course 
WHERE Course_id LIKE 'BIO%'

2. SQL Queries using Aggregate Functions
a) Display the Avg. salary of instructors of Physics department.
SELECT AVG(Salary) 
FROM Instructor 
WHERE Dept_name = 'Physics';

b) Display the Dept_name and Average salary paid to instructor of each department.
SELECT Dept_name, AVG(Salary) 
FROM Instructor 
GROUP BY Dept_name;

c) Display the ID, Name & Department of the instructor drawing the highest salary.
SELECT ID, Name, Dept_name 
FROM Instructor 
WHERE Salary = (SELECT MAX(Salary) FROM Instructor);

d) Display the number of instructors available in Comp. Sci. Department.
SELECT COUNT(*) 
FROM Instructor 
WHERE Dept_name = 'Comp.Sci.';

e) Display the total credits of all courses offered in Comp.Sci. Department.
SELECT SUM(Credits) 
FROM Course 
WHERE Dept_name = 'Comp.Sci.';

f) Display the number of instructors and total salary drawn by Physics and Comp.Sci. departments.
SELECT Dept_name, COUNT(*), SUM(Salary) 
FROM Instructor 
WHERE Dept_name IN ('Physics', 'Comp.Sci.') 
GROUP BY Dept_name;

g) Display the total credits of Comp.Sci. and Biology departments from course table.
SELECT Dept_name, SUM(Credits) 
FROM Course 
WHERE Dept_name IN ('Comp.Sci.', 'Biology') 
GROUP BY Dept_name;

h) Display building wise total budget values.
SELECT Building, SUM(Budget) 
FROM Department 
GROUP BY Building;

i) Display the number of instructors of each department.
SELECT Dept_name, COUNT(*) 
FROM Instructor 
GROUP BY Dept_name;

j) Display the number of instructors of each department sorted in high to low.
SELECT Dept_name, COUNT(*) AS Num_Instructors 
FROM Instructor 
GROUP BY Dept_name 
ORDER BY Num_Instructors DESC;

k) Display the number of courses offered semester wise.
SELECT Semester, COUNT(*) 
FROM Teaches 
GROUP BY Semester;

l) Display the name of departments having number of instructors less than 2;
SELECT Dept_name 
FROM Instructor 
GROUP BY Dept_name 
HAVING COUNT(*) < 2;

m) List the number of instructors of each department having 2 or more than 2 instructors except Finance department, sorted in high to low order of their number.
SELECT Dept_name, COUNT(*) AS Num_Instructors 
FROM Instructor 
WHERE Dept_name <> 'Finance' 
GROUP BY Dept_name 
HAVING COUNT(*) >= 2 
ORDER BY Num_Instructors DESC;

n) Display the Dept_name that has paid total salary more than 50000.
SELECT Dept_name 
FROM Instructor 
GROUP BY Dept_name 
HAVING SUM(Salary) > 50000;

o) Display the total budget for the building built by Watson.
SELECT SUM(Budget) 
FROM Department 
WHERE Building = 'Watson';

p) Display the highest salary of the instructor of Comp.Sci. Department.
SELECT MAX(Salary) 
FROM Instructor 
WHERE Dept_name = 'Comp.Sci.';

------------------------------------------------------------------------------------------------------------------------------

Assignment 4

-------------------------------------------------------------------------------------------------------------------------------

1. TABLE CREATION QUERIES:

CUSTOMER
CREATE TABLE CUSTOMER (
    CUST_NO CHAR(5) PRIMARY KEY CHECK (CUST_NO LIKE 'C____'),
    NAME VARCHAR(100) NOT NULL,
    PHONE_NO VARCHAR(15),
    CITY VARCHAR(50) NOT NULL
);

ACCOUNT
CREATE TABLE ACCOUNT (
    ACCOUNT_NO CHAR(5) PRIMARY KEY CHECK (ACCOUNT_NO LIKE 'A____'),
    TYPE VARCHAR(2) CHECK (TYPE IN ('SB', 'FD', 'CA')),
    BALANCE INT CHECK (BALANCE < 10000000),
    BRANCH_CODE CHAR(4),
    FOREIGN KEY (BRANCH_CODE) REFERENCES BRANCH(BRANCH_CODE)
);

DEPOSITOR
CREATE TABLE DEPOSITOR (
    CUST_NO CHAR(5),
    ACCOUNT_NO CHAR(5),
    PRIMARY KEY (CUST_NO, ACCOUNT_NO),
    FOREIGN KEY (CUST_NO) REFERENCES CUSTOMER(CUST_NO),
    FOREIGN KEY (ACCOUNT_NO) REFERENCES ACCOUNT(ACCOUNT_NO)
);

LOAN
CREATE TABLE LOAN (
    LOAN_NO CHAR(5) PRIMARY KEY CHECK (LOAN_NO LIKE 'L____'),
    CUST_NO CHAR(5),
    AMOUNT INT CHECK (AMOUNT > 1000),
    BRANCH_CODE CHAR(4),
    FOREIGN KEY (CUST_NO) REFERENCES CUSTOMER(CUST_NO),
    FOREIGN KEY (BRANCH_CODE) REFERENCES BRANCH(BRANCH_CODE)
);

BRANCH
CREATE TABLE BRANCH (
    BRANCH_CODE CHAR(4) PRIMARY KEY,
    BRANCH_NAME VARCHAR(100) NOT NULL,
    BRANCH_CITY VARCHAR(50) CHECK (BRANCH_CITY IN ('DELHI', 'MUMBAI', 'KOLKATA', 'CHENNAI'))
);

INSTALLMENT
CREATE TABLE INSTALLMENT (
    INST_NO INT CHECK (INST_NO <= 10),
    LOAN_NO CHAR(5),
    INST_AMOUNT INT NOT NULL,
    PRIMARY KEY (INST_NO, LOAN_NO),
    FOREIGN KEY (LOAN_NO) REFERENCES LOAN(LOAN_NO)
);



✅ INSERT INTO BRANCH
INSERT INTO BRANCH VALUES
('B001', 'JANAKPURI BRANCH', 'DELHI'),
('B002', 'CHANDNICHOWK BRANCH', 'DELHI'),
('B003', 'JUHU BRANCH', 'MUMBAI'),
('B004', 'ANDHERI BRANCH', 'MUMBAI'),
('B005', 'SALTLAKE BRANCH', 'KOLKATA'),
('B006', 'SRIRAMPURAM BRANCH', 'CHENNAI');

✅ INSERT INTO CUSTOMER
INSERT INTO CUSTOMER VALUES
('C0001', 'RAJ ANAND SINGH', '9861258466', 'DELHI'),
('C0002', 'ANKITA SINGH', '9879958651', 'BANGALORE'),
('C0003', 'SOUMYA JHA', '9885623344', 'MUMBAI'),
('C0004', 'ABHIJIT MISHRA', '9455845425', 'MUMBAI'),
('C0005', 'YASH SARAF', '9665854585', 'KOLKATA'),
('C0006', 'SWAROOP RAY', '9437855466', 'CHENNAI'),
('C0007', 'SURYA NARAYAN PRADHAN', '9937955212', 'GURGAON'),
('C0008', 'PRANAV PRAVEEN', '9336652441', 'PUNE'),
('C0009', 'STUTI MISRA', '7870266534', 'DELHI'),
('C0010', 'ASLESHA TIWARI', NULL, 'MUMBAI');

✅ INSERT INTO ACCOUNT
INSERT INTO ACCOUNT VALUES
('A0001', 'SB', 200000, 'B003'),
('A0002', 'SB', 15000, 'B002'),
('A0003', 'CA', 850000, 'B004'),
('A0004', 'CA', 35000, 'B004'),
('A0005', 'FD', 28500, 'B005'),
('A0006', 'FD', 550000, 'B005'),
('A0007', 'SB', 48000, 'B001'),
('A0008', 'SB', 7200, 'B002'),
('A0009', 'SB', 18750, 'B003'),
('A0010', 'FD', 99000, 'B004');

✅ INSERT INTO DEPOSITOR
INSERT INTO DEPOSITOR VALUES
('C0003', 'A0001'),
('C0004', 'A0001'),
('C0004', 'A0002'),
('C0006', 'A0003'),
('C0006', 'A0004'),
('C0001', 'A0005'),
('C0002', 'A0005'),
('C0010', 'A0006'),
('C0009', 'A0007'),
('C0008', 'A0008'),
('C0007', 'A0009'),
('C0006', 'A0010');

✅ INSERT INTO LOAN
INSERT INTO LOAN VALUES
('L0001', 'C0005', 3000000, 'B006'),
('L0002', 'C0001', 50000, 'B005'),
('L0003', 'C0002', 8000000, 'B004'),
('L0004', 'C0010', 100000, 'B004'),
('L0005', 'C0009', 9500000, 'B005'),
('L0006', 'C0008', 25000, 'B006');

✅ INSERT INTO INSTALLMENT
INSERT INTO INSTALLMENT VALUES
(1, 'L0005', 500000),
(1, 'L0002', 10000),
(1, 'L0003', 50000),
(1, 'L0004', 20000),
(2, 'L0005', 500000),
(1, 'L0006', 3000),
(2, 'L0002', 10000),
(3, 'L0002', 10000),
(2, 'L0003', 50000),
(2, 'L0004', 20000);

---------------------------------------------------------------------------------------------------------------------------

Assignment 5

---------------------------------------------------------------------------------------------------------------------------
A) Using Subqueries

1.Name, phone_no, cust_no of customer having Account_no “A0004”
SELECT name, phone_no, cust_no 
FROM CUSTOMER 
WHERE cust_no = (
  SELECT cust_no FROM ACCOUNT WHERE account_no = 'A0004'
);

2.Customer who has not taken any loan
SELECT name 
FROM CUSTOMER 
WHERE cust_no NOT IN (
  SELECT cust_no FROM LOAN
);

3.Account_no and Balance of customer with cust_no = “C0010”
SELECT account_no, balance 
FROM ACCOUNT 
WHERE cust_no = 'C0010';

4.Branch_city where “ASLESHA TIWARI” has taken a loan
SELECT branch_city 
FROM BRANCH 
WHERE branch_code = (
  SELECT branch_code 
  FROM LOAN 
  WHERE cust_no = (
    SELECT cust_no FROM CUSTOMER WHERE name = 'ASLESHA TIWARI'
  )
);

5.Installment details of “ANKITA SINGH”
SELECT * 
FROM INSTALLMENT 
WHERE loan_no IN (
  SELECT loan_no 
  FROM LOAN 
  WHERE cust_no = (
    SELECT cust_no FROM CUSTOMER WHERE name = 'ANKITA SINGH'
  )
);

6.Branch name and city where “ABHIJIT MISHRA” has an account
SELECT branch_name, branch_city 
FROM BRANCH 
WHERE branch_code = (
  SELECT branch_code 
  FROM ACCOUNT 
  WHERE cust_no = (
    SELECT cust_no FROM CUSTOMER WHERE name = 'ABHIJIT MISHRA'
  )
);

7.Create ACCOUNT_TYPE table
CREATE TABLE ACCOUNT_TYPE AS 
SELECT account_no, type 
FROM ACCOUNT 
WHERE 1=0;

8.Insert into ACCOUNT_TYPE where balance < 50000
INSERT INTO ACCOUNT_TYPE (account_no, type) 
SELECT account_no, type 
FROM ACCOUNT 
WHERE balance < 50000;

9.Update ACCOUNT_TYPE to FD for CUST_NO = C0007
UPDATE ACCOUNT_TYPE 
SET type = 'FD' 
WHERE account_no IN (
  SELECT account_no FROM ACCOUNT WHERE cust_no = 'C0007'
);

10.Delete from ACCOUNT_TYPE where balance < 20000
DELETE FROM ACCOUNT_TYPE 
WHERE account_no IN (
  SELECT account_no FROM ACCOUNT WHERE balance < 20000
);

11.Account_no with balance > some FD accounts
SELECT account_no 
FROM ACCOUNT 
WHERE balance > SOME (
  SELECT balance FROM ACCOUNT WHERE type = 'FD'
);

12.Account_no with balance > all FD accounts
SELECT account_no 
FROM ACCOUNT 
WHERE balance > ALL (
  SELECT balance FROM ACCOUNT WHERE type = 'FD'
);

13.Branch details with some loans (use EXISTS)
SELECT * 
FROM BRANCH B 
WHERE EXISTS (
  SELECT * FROM LOAN L WHERE L.branch_code = B.branch_code
);

14.Loans with no installment paid (NOT EXISTS)
SELECT * 
FROM LOAN L 
WHERE NOT EXISTS (
  SELECT * FROM INSTALLMENT I WHERE I.loan_no = L.loan_no
);

15.Update balance using CASE
UPDATE ACCOUNT 
SET balance = balance + 
  CASE 
    WHEN balance > 80000 THEN balance * 0.06
    ELSE balance * 0.05
  END;


B) Using Joins

1.Loan_nos where branch city = MUMBAI
SELECT L.loan_no 
FROM LOAN L 
JOIN BRANCH B ON L.branch_code = B.branch_code 
WHERE B.branch_city = 'MUMBAI';

2.Type of accounts in DELHI
SELECT DISTINCT A.type 
FROM ACCOUNT A 
JOIN BRANCH B ON A.branch_code = B.branch_code 
WHERE B.branch_city = 'DELHI';

3.Name and phone of customers with balance > 100000
SELECT C.name, C.phone_no 
FROM CUSTOMER C 
JOIN ACCOUNT A ON C.cust_no = A.cust_no 
WHERE A.balance > 100000;

4.Installment_no and amount for RAJ ANAND SINGH
SELECT I.installment_no, I.amount 
FROM INSTALLMENT I 
JOIN LOAN L ON I.loan_no = L.loan_no 
JOIN CUSTOMER C ON L.cust_no = C.cust_no 
WHERE C.name = 'RAJ ANAND SINGH';

5.Customers without SB account
SELECT DISTINCT C.name 
FROM CUSTOMER C 
WHERE C.cust_no NOT IN (
  SELECT cust_no 
  FROM ACCOUNT 
  WHERE type = 'SB'
);

6.Customers who paid 50000 as installment
SELECT DISTINCT C.name 
FROM CUSTOMER C 
JOIN LOAN L ON C.cust_no = L.cust_no 
JOIN INSTALLMENT I ON L.loan_no = I.loan_no 
WHERE I.amount = 50000;

7.Phone numbers of customers with account at SALTLAKE
SELECT DISTINCT C.phone_no 
FROM CUSTOMER C 
JOIN ACCOUNT A ON C.cust_no = A.cust_no 
JOIN BRANCH B ON A.branch_code = B.branch_code 
WHERE B.branch_name = 'SALTLAKE';

8.Branch name and city for ABHIJIT MISHRA’s account
SELECT DISTINCT B.branch_name, B.branch_city 
FROM CUSTOMER C 
JOIN ACCOUNT A ON C.cust_no = A.cust_no 
JOIN BRANCH B ON A.branch_code = B.branch_code 
WHERE C.name = 'ABHIJIT MISHRA';

9.Account types and balances of SWAROOP RAY
SELECT A.type, A.balance 
FROM CUSTOMER C 
JOIN ACCOUNT A ON C.cust_no = A.cust_no 
WHERE C.name = 'SWAROOP RAY';

10.Branch codes where total balance > avg of all branch totals
WITH BranchBalance AS (
  SELECT branch_code, SUM(balance) AS total_balance 
  FROM ACCOUNT 
  GROUP BY branch_code
), AvgBalance AS (
  SELECT AVG(total_balance) AS avg_bal FROM BranchBalance
)
SELECT branch_code 
FROM BranchBalance 
WHERE total_balance > (SELECT avg_bal FROM AvgBalance);